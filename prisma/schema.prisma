// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sheet {
  id                        String                     @id @default(uuid())
  pcName                    String                     @map("pc_name")
  owner                     String
  isEditable                Boolean                    @default(true)
  pcAge                     Int?                       @map("pc_age")
  pcSpecie                  String?                    @map("pc_specie")
  pcRole                    String?                    @map("pc_role")
  userId                    String                     @map("user_id")
  sheetTemplateId           String?                    @map("sheet_template_id")
  templateValues            Json?                      @map("template_values")
  createdAt                 DateTime                   @default(now()) @map("created_at")
  updatedAt                 DateTime                   @updatedAt @map("updated_at")
  user                      User                       @relation(fields: [userId], references: [id])
  sheetTemplate             SheetTemplate?             @relation(fields: [sheetTemplateId], references: [id])
  playerCharacterAttributes PlayerCharacterAttributes?
  partyMember               PartyMember[]

  @@map("sheets")
}

model PlayerCharacterAttributes {
  id                   String              @id @default(uuid())
  attributesTemplateId String?             @map("attributes_template_id")
  sheetId              String              @unique @map("sheet_id")
  sheet                Sheet               @relation(fields: [sheetId], references: [id])
  attributesDefined    Json                @map("attributes_defined")
  attributesTemplate   AttributesTemplate? @relation(fields: [attributesTemplateId], references: [id])

  @@map("player_character_attributes")
}

model AttributesTemplate {
  id         String @id @default(uuid())
  attributes Json

  playerCharacterAttributes PlayerCharacterAttributes[]

  @@map("attributes_templates")
}

model SheetTemplate {
  id        String   @id @default(uuid())
  children  Json
  isDefault Boolean  @default(false) @map("is_default")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Sheet Sheet[]

  @@map("sheet_templates")
}

model Party {
  id              String   @id @default(uuid())
  name            String
  description     String?
  imgUrl          String?  @map("img_url")
  maxSize         Int?     @map("max_size")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  dungeonMasterId String   @map("dungeon_master_id")

  players           User[]
  partyMembers      PartyMember[]
  membersCharacters MemberCharacters[]
  PartyInvite       PartyInvite[]

  @@map("parties")
}

enum PartyRole {
  DUNGEON_MASTER
  PLAYER
}

model PartyMember {
  id        String    @id @default(uuid())
  partyId   String    @map("party_id")
  userId    String    @map("user_id")
  sheetId   String?   @map("sheet_id")
  role      PartyRole @default(PLAYER)
  createdAt DateTime  @default(now()) @map("created_at")

  party Party  @relation(fields: [partyId], references: [id])
  user  User   @relation(fields: [userId], references: [id])
  sheet Sheet? @relation(fields: [sheetId], references: [id])

  @@map("role_of_parties")
}

model MemberCharacters {
  id          String @id @default(uuid())
  partyId     String @map("party_id")
  characterId String @map("character_id")
  userId      String @map("user_id")

  party Party @relation(fields: [partyId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("character_of_parties")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         UserRole @default(USER)
  createdAt    DateTime @default(now()) @map("created_at")
  partyId      String?  @map("party_id")

  sheets                Sheet[]
  party                 Party[]
  memberOfParties       PartyMember[]
  partyCharacters       MemberCharacters[]
  receivedNotifications Notification[]     @relation("notification_from")
  sendedNotifications   Notification[]     @relation("notification_to")
  receivedInvites       PartyInvite[]      @relation("party_invite_from")
  sendedInvites         PartyInvite[]      @relation("party_invite_to")

  @@map("users")
}

enum NotificationType {
  ALERT
  PARTY_INVITE
}

enum AlertType {
  ERROR
  ACTION_NEEDED
}

model Notification {
  id        String           @id @default(uuid())
  title     String?
  content   String?
  type      NotificationType
  alertType AlertType?       @map("alert_type")
  createdAt DateTime         @default(now()) @map("created_at")
  viewedAt  DateTime?        @map("viewed_at")

  fromId String @map("from_id")
  toId   String @map("to_id")
  from   User   @relation(name: "notification_from", fields: [fromId], references: [id])
  to     User   @relation(name: "notification_to", fields: [toId], references: [id])

  @@map("notifications")
}

model PartyInvite {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  partyId   String           @map("party_id")
  party     Party            @relation(fields: [partyId], references: [id])
  fromId    String           @map("from_id")
  toId      String           @map("to_id")
  type      NotificationType
  from      User             @relation(name: "party_invite_from", fields: [fromId], references: [id])
  to        User             @relation(name: "party_invite_to", fields: [toId], references: [id])
  viewedAt  DateTime?        @map("viewed_at")

  @@map("party_invites")
}
